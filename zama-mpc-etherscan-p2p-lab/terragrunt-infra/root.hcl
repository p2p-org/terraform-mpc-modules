# Root Terragrunt Configuration
# Shared configuration for all environments with dynamic AWS profile support

locals {
  # Load common configuration
  common_vars = read_terragrunt_config("${get_repo_root()}/examples/terragrunt-infra/common.hcl")
}

# Remote state configuration with dynamic profile and region
remote_state {
  backend = "s3"
  config = {
    bucket         = local.common_vars.inputs.terraform_state_bucket
    key            = "${path_relative_to_include()}/terraform.tfstate"
    region         = local.common_vars.inputs.aws_region
    encrypt        = true
    profile        = local.common_vars.inputs.aws_profile
    
    # Optional: Add DynamoDB table for state locking
    # dynamodb_table = "terraform-state-lock"
  }
}

# Set environment variables for automatic AWS profile handling
terraform {
  before_hook "set_aws_profile" {
    commands = ["apply", "plan", "destroy", "refresh", "validate", "init", "output"]
    execute  = ["bash", "-c", "export AWS_PROFILE=${local.common_vars.inputs.aws_profile}"]
  }
  
  extra_arguments "common_vars" {
    commands = get_terraform_commands_that_need_vars()
    env_vars = {
      AWS_PROFILE = local.common_vars.inputs.aws_profile
    }
  }
}

# Generate dynamicbackend configuration
generate "backend" {
  path      = "backend.tf"
  if_exists = "overwrite"
  contents = <<EOF
terraform {
  backend "s3" {}
}
EOF
}

# Generate dynamic provider configuration
generate "providers" {
  path      = "providers.tf"
  if_exists = "overwrite"
  contents = <<EOF
# Auto-generated provider configurations
# This file is generated by Terragrunt - DO NOT EDIT MANUALLY
# Environment: ${local.common_vars.inputs.environment}
# AWS Profile: ${local.common_vars.inputs.aws_profile}
provider "aws" {
  region              = "${local.common_vars.inputs.aws_region}"
  profile             = "${local.common_vars.inputs.aws_profile}"
  allowed_account_ids = ["${local.common_vars.inputs.aws_account_id}"]
  
  default_tags {
    tags = {
      Environment = "${local.common_vars.inputs.environment}"
      ManagedBy   = "terragrunt"
      Project     = "${local.common_vars.inputs.project_name}"
    }
  }
}

data "aws_eks_cluster" "this_provider" {
  count = ${local.common_vars.inputs.use_eks_cluster_authentication ? 1 : 0 }
  name = "${local.common_vars.inputs.cluster_name}"
}

provider "kubernetes" {
  %{if local.common_vars.inputs.use_eks_cluster_authentication}
  host                   = data.aws_eks_cluster.this_provider[0].endpoint
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.this_provider[0].certificate_authority[0].data)
  exec {
    api_version = "client.authentication.k8s.io/v1beta1"
    args        = ["eks", "get-token", "--cluster-name", "${local.common_vars.inputs.cluster_name}", "--region", "${local.common_vars.inputs.aws_region}", "--profile", "${local.common_vars.inputs.aws_profile}"]
    command     = "aws"
  }
  %{else}
  config_path    = "${local.common_vars.inputs.kubeconfig_path}"
  config_context = "${local.common_vars.inputs.kubeconfig_context}"
  %{endif}
}

EOF
} 